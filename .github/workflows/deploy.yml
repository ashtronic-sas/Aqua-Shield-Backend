name: Deploy User Service to AWS Lambda

on:
  push:
    branches: 
      - main 

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('user_service/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r user_service/requirements.txt

      - name: Create archive of dependencies
        run: |
          source venv/bin/activate
          cd venv/lib/python3.10/site-packages
          zip -r9 $GITHUB_WORKSPACE/dependencies.zip .

      - name: Create API archive
        run: |
          zip -r9 $GITHUB_WORKSPACE/api.zip -r user_service/app

      - name: Upload layer to S3
        run: aws s3 cp dependencies.zip s3://your-s3-bucket-name/layers/dependencies.zip

      - name: Upload API to S3
        run: aws s3 cp api.zip s3://your-s3-bucket-name/api.zip

      - name: Create Lambda Layer
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version --layer-name user-service-dependencies --content S3Bucket=your-s3-bucket-name,S3Key=layers/dependencies.zip --compatible-runtimes python3.10 | jq -r '.LayerVersionArn')
          echo "LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV

  CD:
    runs-on: ubuntu-latest
    needs: [CI]
    environment: production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Lambda Function
        run: |
          aws lambda update-function-code --function-name user_service --s3-bucket your-s3-bucket-name --s3-key api.zip
          aws lambda update-function-configuration --function-name user_service --layers ${{ env.LAYER_ARN }}

      - name: Set API Gateway Trigger
        run: |
          aws lambda add-permission --function-name user_service --action lambda:InvokeFunction --principal apigateway.amazonaws.com --source-arn arn:aws:execute-api:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:api_id/*/GET/user_service
