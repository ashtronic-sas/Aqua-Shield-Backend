name: Deploy owner_staging Service to AWS Lambda

on:
  push:
    branches:
      - owner_staging

jobs:

  CI:
    runs-on: ubuntu-latest
    environment: staging

    steps:
      # Step-1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step-2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step-3: Cache pip dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      # Step-4: Install dependencies
      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          cd owner
          pip install -r requirements.txt
          
      # Step-5: Run Tests
      # - name: Run Tests
      #   run: |
      #     source venv/bin/activate
      #     pytest

      # Step-6: Create archive of dependencies and API files
      - name: Create archive of dependencies and API files
        run: |
          source venv/bin/activate
          cd venv/lib/python3.10/site-packages
          zip -r9 $GITHUB_WORKSPACE/owner_staging.zip .

          cd $GITHUB_WORKSPACE/owner/app
          echo "SECRET_KEY=${{ secrets.SECRET_KEY_JWT }}" > .env
          echo "SQLALCHEMY_DATABASE_URL=${{ secrets.SQLALCHEMY_DATABASE_URL }}" >> .env
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}" >> .env
          cd ..
          cd $GITHUB_WORKSPACE/owner
          zip -g $GITHUB_WORKSPACE/owner_staging.zip -r app
      # Step-7: Verify Zip Content
      - name: Verify Zip Content
        run: unzip -l owner_staging.zip

      # Step-8: Upload zip file artifact
      - name: Upload zip file artifact
        uses: actions/upload-artifact@v4
        with:
          name: api
          path: owner_staging.zip

          
  CD:
    runs-on: ubuntu-latest
    needs: [CI]
    environment: staging

    #if: github.ref == 'refs/heads/owner' && github.event_name == 'push'
    
    steps:
      # Step-1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step-2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step-3: Download Lambda api.zip
      - name: Download Lambda owner_staging.zip
        uses: actions/download-artifact@v4
        with:
          name: api

      # Step-4: Upload to S3
      - name: Upload to S3
        run: aws s3 cp owner_staging.zip s3://aquashieldbackenddev/owner_staging.zip

      # Step-5: Deploy new Lambda
      - name: Deploy new Lambda
        run: aws lambda update-function-code --function-name owner_staging --s3-bucket aquashieldbackenddev --s3-key owner_staging.zip